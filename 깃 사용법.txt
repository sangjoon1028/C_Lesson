git config --global user.name ""
git config --global user.email ".com"

// 깃을 처음 시작할때
git clone https://github.com/sangjoon1028/C_Lesson.git

복습을 한다 다저장하고

// 수정한 또는 새로만든 소스 파일들을 모두 스테이징 시킨다.
git add . 

//
git commit -m "작업한 이력 커밋이름"

git log

git push origin main

// 학원에서

git pull origin main


6/5


#include <stdio.h>
#include <string.h>

int main()
{
    
    //char sz[] = { 65, 66, 67, 68, 69, 70, 71 };
    //'\0' == 0 : null terminated character(널 터미네이티드 문자)
    char sz[] = { 'A', 'B', 'C', 'D', 'E', 'F', 'G','\0'};
    // sz 배열의 크기 : 7 bytes
    // sz 배열의 길이 : 7개
    printf("sz배열의 크기 : %d bytes\n", sizeof(sz));
    printf("sz배열의 길이 : %d\n", sizeof(sz)/sizeof(char));
    
    int length = sizeof(sz) / sizeof(char);
    for (int i = 0; i < length; i++)
    {
        printf("%c", sz[i]);
    }

    printf("\n");
    //for문을 이용하여 sz배열에 있는 값들을 모두 소문자로 변경하세요
    
    for (int i = 0; i < strlen(sz); i++)
    {
        sz[i] += 32;

    }




    printf("sz : %s\n", sz);
    printf("sz 문자열의 길이 : %d\n", strlen(sz));

    //char sz2[] = { 'H','e','l','I','o',' ','W','o','r','l','d',0 };
    char sz2[] = "Hellow World";
    printf("sz2의 길이 : %d\n", strlen(sz2));
    printf("sz2의 배열의 길이 : %d\n", sizeof(sz2));
    for (int i = 0; i < strlen(sz2); i++)
    {
        printf("%c", sz2[i]);


      
    }

    //sz의 문자중 소문자를 대문자로 변경하여 출력하세요

  
    for (int i = 0; i < strlen(sz2); i++)
    {
        if (sz2[i] >= 'a' && sz[i] <= 'z') // sz[i]요소가 소문자이면...
            sz2[i] -= 32;
        
        printf("%c\n", sz2[i]); //HELLO WORLD

        char sz3[] = "안녕";
        printf("%s\n", sz3);
        printf("strlen(sz3) : %d\n", strlen(sz3));
        printf("sizeof(sz3) : %d\n", sizeof(sz3));

        return 0;


    }
      


    
    return 0;
}
////

++ #include <stdio.h>


int main()
{




	// 배열(Array)
	// 인덱싱은 배열에서 값을 가져오는 방법
	// 인덱스는 배열의 원소들의 개수 -1


	// 배열로부터 값을 가져오는 방법
	int nums[5] = { 10, 20, 30, 40, 50 };
	printf("nums 배열의 첫번쨰값 : %d\n", nums[0]);
	printf("nums 배열의 두번쨰값 : %d\n", nums[1]);
	printf("nums 배열의 다섯번쨰값 : %d\n", nums[4]);

	nums[0] = 60;

	for (int i = 0; i < 5; i++)
	{
		printf("nums[%d] = %d\n", i, nums[i]);


	}
	//
	short score[] = { 100,90,80,70 };
	// score 배열의 모든 원소들의 합계를 구하는 코드를 작성하세요
	// 총점 : xxxx 점
	// 평균 : xx.xx 점
	int total = 0;
	for (int i = 0; i < 4; i++) // i가 0부터 4보다 작은동안 i값을 1씩 증가시키면서 반복
	{
		total += score[i];
	}
		printf("총합의 점수는 %d\n", total);
		printf("평균 : %.2f 점\n", total/4.0F);

		//int nums[5] = { 10, 20, 30, 40, 50 };
		/*
		* 
		* 아래와 같이 출력되도록 코드를 작성하세요
		nums[0] : 1
		nums[0] : 2
		nums[0] : 3
		nums[0] : 4
		nums[0] : 5		
		*/
		//int nums[5] = { 10, 20, 30, 40, 50 };
		for (int i = 0; i < 5; i++)
		{
			nums[0] = i + 1;
			printf("nums[%d] : %d\n", i, nums[i]);

		
		}

	
		





	
	

	
	
	
	return 0;



} 이게 레슨10 위에가 레슨11

------- --------
6/10
#include <stdio.h>



int add(int a, int b)
{
	
	a = 100;
	b = 200;
	

	return a + b;
}

void exchange(int *p1, int *p2)
{
	int tmp = *p1;
	*p1 = *p2;
	*p2 = tmp;


}

// 함수의 오버로딩(Over Loading)
int add(int *p1, int *p2)
{
	printf("%d\n", *p1);
	printf("%d\n", *p2);

	*p1 = 100;
	*p2 = 200;

	return *p1 + *p2;

	
}

void add(int a, int b, int* ret)
{
	*ret = a + b;



}



int main()
{
	// Local(지역)
	//
	short num; // 메모리 2 바이트 확보
	num = 5; // 확보된 메모리 num공간에

	//&의 사용처
	//논리 연산자 : 1 && 0
	//비트연산자  : 1 & 0
	//주소연산자  : &변수, 변수의 주소

	printf("num = %d\n", num);
	printf("num의 크기 : %zubytes\n", sizeof(num));
	printf("num의 주소 : %p\n", &num);
	
	
	
	// Pointer(포인터) 변수 : 무조건 주소만 저장할수 있다.
	// 자료형*변수명;

	short* addr = &num; // short* 형을 갖는 변수 addr을 선언하고, num의 주소를 저장한다.
	printf("addr의 크기 %zu\n", sizeof(addr));
	printf("addr의 값 : %p\n", addr);

	// addr = 100; 이런 코드는 안됨!!!
	printf("addr이 참조하는 곳의 값 : %d\n", *addr);

	*addr = 20;
	printf("num = %d\n", num);


	long long num2 = 200000L;
	printf("num2 = %lld\n", num2);
	printf("num의 크기 : %zubytes\n", sizeof(num2));
	printf("num의 주소 : %p\n", &num2);
	long long* addr2 = &num2;

	
	printf("addr2의 크기 : %zubytes\n", sizeof(addr2));
	printf("addr2의 주소 : %p\n", &addr2);
	printf("addr2가 참조하는 곳의 값 : %d\n", *addr2);
	



	int n1 = 10;
	int n2 = 20;
	int n3 = add(n1, n2);   // 값에 의한 호출(Call by Value)
	printf("n1= %d\n", n1);
	printf("n2= %d\n", n2);
	printf("n3= %d\n", n3);


	n3 = add(&n1, &n2);    //참조에 의한 호출 Call by Reforence
	printf("n1 = %d\n", n1);
	printf("n2 = %d\n", n2);
	printf("n3 = %d\n", n3);

	printf("===========================\n");
	n1 = 5;
	n2 = 8;

	add(n1, n2, &n3);
	printf("n1 = %d\n", n1);
	printf("n2 = %d\n", n2);
	printf("n3 = %d\n", n3);


	int tmp = n1;
	n1 = n2;
	n2 = tmp;

	//exchange
	printf("===========================\n");

	exchange(&n1, &n2);

	

	
	return 0;
}

--- 위에가 레슨 12 ---


#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>




// 배열을 전달받아서 배열의 모든 요소들의 내용을 출력하기
// 함수로 배열을 전달할때는 반드시 배열의 시작 주소와 배열의 길이를 같이 전달해야한다.
// 배열 []
void display_array(int p[], int count)
{
	printf("[display_array] p의 크기 : %zu\n", sizeof(p));
	printf("p[0] = %d\n", p[0]);
	for (int i = 0; i < count; i++)
	{
		printf("%d\t", p[i]);

	}
	printf("\n");

}

int main()
{
	/*
	int num;
	printf("정수를 입력하세요 >>>");
	scanf("%d", &num);
	printf("입력된 정수 : %d\n", num);
	*/

	char sz[] = "abcde";
	// 배열명은 주소(상수) 이다.
	//char sz[30] = { 0 };
	//sz[0] = 'A'; // "A"== sz
	//printf("문자열을 입력하세요 >>>");
	//scanf("%s", sz);
	printf("입력된 문자열 : %s\n", sz);

	int num = 5; // 5 = num; 불가능
	printf("num의 주소 : %p\n", num);
	printf("sz의 주소 : %p\n", sz);

	char* ptr = sz; // 가능
	// sz = ptr = 불가능
	printf("%c\n", sz[0]); //a
	printf("%c\n", ptr[0]);

	int arr[] = { 10,20,30,40,50 };
	int* ptr2 = arr; // arr = ptr2; 불가능
	printf("%d\n", arr[2]);
	printf("%d\n", ptr2[2]);
	printf("arr의 크기 : %zu\n", sizeof(arr));
	printf("ptr2의 크기 : %zu\n", sizeof(ptr2));

	int count = sizeof(arr) / sizeof(int); // 갯수를 구함
	display_array(arr, count);



	return 0;
} 

// 소문자를 대문자로출력하는 함수를 작성하세요
// char sz[] = "abcde";
/*
A
B
C
D
E



// 다음과 같은 형식으로 출력되는 함수를 작성하세요
//char sz[] = "abcde";
/*
abcde
bcde
cde
de
e
*/
*/  이런식으로  레슨12 , 13으로? 위에 두문제 만들어오기

---- 레슨 13 -----
